# Copyright 2016 Tim Niemeyer
# License GPLv3

wifiListRadio() {
	if [ $# -ne "0" ]
	then
		echo "Usage: wifiListRadio"
		return 1
	fi

	uci -q show wireless | sed -n 's,.*\.\([a-z0-9]*\)=wifi-device,\1,p'
	return 0
}

wifiGetFreq() {
	if [ $# -ne "1" ]
	then
		echo "Usage: wifiGetFreq <radio>"
		return 1
	fi

	local radio=$1

	# Use hwmode for switching, since this is always set by firmware (effectively hard-coded)
	# Do not use channel, as this might be "auto" for both
	[ "$(uci get "wireless.${radio}.hwmode")" = "11a" ] && echo "5" || echo "2"
	return 0
}

wifiGetPhy() {
	# Returns the wifi-device (radioX) for a given frequency (2 or 5)

	[ $# -ne "1" ] && return 1

	local freq=$1
	local radio

	for radio in $(wifiListRadio); do
		if [ "$(wifiGetFreq $radio)" = "$freq" ]; then
			echo "$radio"
			return 0
		fi
	done

	return 0 # also returns success if radio is empty
}

wifiSetActive() {
	# En- or disables WiFi permanently (upgrade-safe)
	#
	# wifiSetActive <freq> <setto>
	#
	# freq: 2 or 5
	# setto: 0 (disabled) or 1 (enabled)

	[ $# -ne "2" ] && return 1

	local freq=$1
	local setto=$2

	[ "$setto" = "1" ] && disabled="0" || disabled="1"

	for radio in $(wifiListRadio); do
		[ "$(wifiGetFreq $radio)" = "$freq" ] || continue

		uci set fff.wifi=fff
		if [ "$freq" = "2" ] ; then
			uci set "fff.wifi.disable24ghz=$disabled"
		else
			uci set "fff.wifi.disable5ghz=$disabled"
		fi
		uci set "wireless.${radio}.disabled=$disabled"
	done

	uci commit fff
	uci commit wireless

	return 0
}

wifiSetAllActive() {
	# En- or disables all WiFi interfaces permanently (upgrade-safe)
	#
	# wifiSetActive <setto>
	#
	# setto: 0 (disabled) or 1 (enabled)

	[ $# -ne "1" ] && return 1

	local setto=$1

	[ "$setto" = "1" ] && disabled="0" || disabled="1"

	uci set fff.wifi=fff
	uci set "fff.wifi.disablewifi=$disabled"
	for radio in $(wifiListRadio); do
		uci set "wireless.${radio}.disabled=$disabled"
	done

	uci commit fff
	uci commit wireless

	return 0
}

# vim: set noexpandtab:tabstop=4
