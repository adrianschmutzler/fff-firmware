#!/bin/sh
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

. /lib/functions/fff/network

setupPorts() {
    # Add a single port to the *_PORTS config
    # Usage: setupPorts <port id> <port mode>

    local port=$1
    local mode=$2

    #default: BATMAN
    if [ "$mode" = "WAN" ] ; then
        WAN_PORTS="${WAN_PORTS} $port"
    elif [ "$mode" = "CLIENT" ] ; then
        CLIENT_PORTS="${CLIENT_PORTS} $port"
    else
        BATMAN_PORTS="${BATMAN_PORTS} $port"
    fi
}

BOARD="$(uci get board.model.name)"
. /etc/network.$BOARD

if [ -s /etc/network.config ] ; then
    . /etc/network.config
else
    # Write network.config
    echo "CLIENT_PORTS='$CLIENT_PORTS'" > /etc/network.config
    echo "BATMAN_PORTS='$BATMAN_PORTS'" >> /etc/network.config
    if [ -n "$WAN_PORTS" ] ; then
        echo "WAN_PORTS='$WAN_PORTS'" >> /etc/network.config
    fi
    if [ "$ONE_PORT" = "YES" ] || [ -n "$ETHPORT" ] ; then
        echo "ETHMODE='$ETHMODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    if [ -n "$LAN0PORT" ] ; then
        echo "LAN0MODE='$LAN0MODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    if [ -n "$LAN1PORT" ] ; then
        echo "LAN1MODE='$LAN1MODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    echo "FORCEPARSE='0' # Parse at: 0=first boot only, 1=every reboot, 2=next reboot (once)" >> /etc/network.config
fi

if [ "$FORCEPARSE" = '2' ] ; then
    sed -i '/^FORCEPARSE/d' /etc/network.config
    echo "FORCEPARSE='0' # Parse at: 0=first boot only, 1=every reboot, 2=next reboot (once)" >> /etc/network.config
    FORCEPARSE='1'
fi

if [ -n "$ETHPORT" ] ; then
    #LAN@AR150: default: BATMAN
    setupPorts "$ETHPORT" "${ETHMODE}"
fi
if [ -n "$LAN0PORT" ] ; then
    #LAN0@two-port: default: BATMAN
    setupPorts "$LAN0PORT" "${LAN0MODE}"
fi
if [ -n "$LAN1PORT" ] ; then
    #LAN1@two-port: default: BATMAN
    setupPorts "$LAN1PORT" "${LAN1MODE}"
fi

if [ "$ONE_PORT" = "YES" ] ; then
	if ! uci -q get "network.$SWITCHDEV.ifname" || [ "$FORCEPARSE" = '1' ] ; then
		uci set "network.$SWITCHDEV=interface"
		uci set "network.$SWITCHDEV.ifname=$SWITCHDEV"
		if [ "$ETHMODE" = "WAN" ]; then
			enableAutoConf "$WANDEV"
			uci set network.mesh.ifname="bat0"
			uci set network.wan.ifname="$WANDEV"
			uci del network.ethmesh.ifname
			uci del network.eth0.macaddr
		elif [ "$ETHMODE" = "CLIENT" ] ; then
			disableAutoConf "$WANDEV"
			uci set network.mesh.ifname="bat0 $SWITCHDEV"
			uci set network.wan.ifname="eth1" #eth1 because it is default in config file
			uci del network.ethmesh.ifname
			uci del network.eth0.macaddr
		else # default=BATMAN
			disableAutoConf "$WANDEV"
			uci set network.mesh.ifname="bat0"
			uci set network.wan.ifname="eth1" #eth1 because it is default in config file
			uci set network.ethmesh.ifname="$SWITCHDEV"
			ETHMESHMAC="$(macFlipLocalBit "$ROUTERMAC")"
			ETHMESHDEV="$SWITCHDEV"
		fi
		uci -q commit network
	fi
else
	if ! uci -q get "network.$SWITCHDEV" > /dev/null || [ "$FORCEPARSE" = '1' ] ; then
		SWITCHHW="$(swconfig list | awk '{ print $4 }')"

		uci set "network.$SWITCHDEV=switch"
		uci set "network.$SWITCHDEV.name=$SWITCHHW"
		uci set "network.$SWITCHDEV.enable=1"
		uci set "network.$SWITCHDEV.reset=1"
		uci set "network.$SWITCHDEV.enable_vlan=1"

		uci set "network.${SWITCHDEV}_1=switch_vlan"
		uci set "network.${SWITCHDEV}_1.device=$SWITCHHW"
		uci set "network.${SWITCHDEV}_1.vlan=1"
		uci set "network.${SWITCHDEV}_1.ports=$CLIENT_PORTS"

		# This defines the VLAN for WAN ports inside the switch.
		# This is required even if the WAN eth is separate, but the WAN port is in the switch!
		if [ "$WANDEV" = "$SWITCHDEV" ] || [ -n "$WAN_PORTS" ]; then
			uci set "network.${SWITCHDEV}_2=switch_vlan"
			uci set "network.${SWITCHDEV}_2.device=$SWITCHHW"
			uci set "network.${SWITCHDEV}_2.vlan=2"
			uci set "network.${SWITCHDEV}_2.ports=$WAN_PORTS"
		fi

		ETHMESHDEV="$SWITCHDEV.3"
		uci set "network.${SWITCHDEV}_3=switch_vlan"
		uci set "network.${SWITCHDEV}_3.device=$SWITCHHW"
		uci set "network.${SWITCHDEV}_3.vlan=3"
		uci set "network.${SWITCHDEV}_3.ports=$BATMAN_PORTS"

		uci set network.mesh.ifname="$SWITCHDEV.1 bat0"
		uci set network.ethmesh.ifname="$ETHMESHDEV"

		# This defines the WAN interface. We use the VLAN ID only if we do NOT have a separate eth.
		# This is different from the criterion for the WAN port dealt with above!
		# If the WANDEV is different from the SWITCHDEV, but the WAN port is in the switch,
		# the WAN eth has to be connected to the switch untagged!
		[ "$WANDEV" = "$SWITCHDEV" ] && WANDEV="${SWITCHDEV}.2"
		enableAutoConf "$WANDEV"
		uci set network.wan.ifname="$WANDEV"

		uci -q commit network
	fi
fi

/etc/init.d/network restart

if [ -n "$ETHMESHMAC" ] && [ -n "$ETHMESHDEV" ]; then
    fixMac "$ETHMESHMAC" "$ETHMESHDEV" "ethmesh"
fi

if [ -n "$ROUTERMAC" ]; then
    fixMac "$ROUTERMAC" "br-mesh" "mesh"
fi

if uci -q get "network.mesh.ip6addr" > /dev/null | grep "fdff:0"
then
    echo "IPv6 for mesh is set already"
else
    echo "Setting IPv6 addresses"
    # Some time needed :(
    sleep 5

    prefix="fdff:0::/64"
    # Set $prefix::MAC as IP
    addr="$(ipMacAssemble "$prefix" "$ROUTERMAC")"
    ip -6 addr add $addr dev br-mesh

    uci -q del network.globals
    uci -q set network.globals=globals
    uci -q set network.globals.ula_prefix=$prefix
    uci -q add_list network.mesh.ip6addr=$addr
    uci -q set network.mesh.proto=static

    # Set $prefix::1 as IP
    addr="$(ipAssemble "$prefix" "1")"
    ip -6 addr add $addr dev br-mesh
    uci -q add_list network.mesh.ip6addr=$addr

    # Set $prefix::link-local as IP
    addr="$(ipEUIAssemble "$prefix" "$ROUTERMAC")"
    ip -6 addr add $addr dev br-mesh
    uci -q add_list network.mesh.ip6addr=$addr

    uci -q commit network

    /etc/init.d/fff-uradvd restart
fi
