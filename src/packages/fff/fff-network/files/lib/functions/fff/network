#!/bin/sh
# Copyright 2017 Adrian Schmutzler
# License GPLv3

ipMacSuffix() {
	# Returns the lower 64 bits of an IPv6 address (0:aabb:ccdd:eeff)
	# based on the provided MAC address (aa:bb:cc:bb:ee:ff)
	#
	# Argument: MAC address (with colons)

	[ $# -ne "1" ] && return 1

	local mac=$1

	echo "$mac" | awk -F: '{ print "0:"$1$2":"$3$4":"$5$6 }'
	return 0
}

ipEUISuffix() {
	# Returns the EUI (interface ID, a8bb:ccff:fedd:eeff)
	# based on the provided MAC address (aa:bb:cc:bb:ee:ff)
	#
	# Argument: MAC address (with colons)

	[ $# -ne "1" ] && return 1

	local mac=$1

	echo "$mac" | awk -F: '{ printf("%02x%s:%sff:fe%s:%s%s\n", xor(("0x"$1),2), $2, $3, $4, $5, $6) }'
	return 0
}

ipAssemble() {
	# Concatenates a prefix (1st argument) and a suffix (2nd argument) to a merged IPv6 address
	# (The prefix has to bear the subnet: fdff::/64)
	# (The prefix must only contain the higher 64 bits (correct: 0:0:0:0: or 0:: - wrong: 0:0:0:0::)

	[ $# -ne "2" ] && return 1

	local prefix=$1
	local suffix=$2

	echo "$prefix" | sed -e 's,/,'$suffix'/,'
	return 0
}

ipMacAssemble() {
	# Concatenates a prefix (1st argument) and a MAC-based suffix (MAC address as 2nd argument) to a merged IPv6 address
	# (Details on prefix: Check ipAssemble(), details on suffix: Check ipMacSuffix())

	[ $# -ne "2" ] && return 1

	local prefix=$1
	local mac=$2

	suffix="$(ipMacSuffix "$mac")"
	ipAssemble "$prefix" "$suffix"
	return 0
}

ipEUIAssemble() {
	# Concatenates a prefix (1st argument) and an EUI-based suffix (MAC address as 2nd argument) to a merged IPv6 address
	# (Details on prefix: Check ipAssemble(), details on suffix: Check ipEUISuffix())

	[ $# -ne "2" ] && return 1

	local prefix=$1
	local mac=$2

	suffix="$(ipEUISuffix "$mac")"
	ipAssemble "$prefix" "$suffix"
	return 0
}

ipTidyColon() {
	# Collapses zeros to :: to yield short but valid IPv6 addresses
	#
	# Argument: IPv6 address to be shortened

	[ $# -ne "1" ] && return 1

	local addr=$1

	echo "$addr" | grep -q "::" || addr="$(echo "$addr" | sed -e 's,:[0:]*:,::,')"
	echo "$addr"
	return 0
}

macFlipLocalBit() {
	# Returns given MAC-address with locally administered bit flipped
	#
	# Argument: MAC-address

	local mac=$1

	echo "$mac" | awk -F: '{ printf("%02x:%s:%s:%s:%s:%s\n", xor(("0x"$1),2), $2, $3, $4, $5, $6) }'
	return 0
}

setAutoConf() {
	# Sets ipv6 auto configuration on an interface to on/off
	# Usage: setAutoConf <interface> <[0|1]>
	local iface=$1
	local on=$2

	sysctlfile="/etc/sysctl.d/51-fff-network-$iface.conf"
	echo "# Generated from configurenetwork" > "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_defrtr = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_pinfo = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.autoconf = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_rtr_pref = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.forwarding = 0" >> "$sysctlfile"

	/sbin/sysctl -p "$sysctlfile"
}

enableAutoConf() {
	# Enables ipv6 auto configuration on an interface
	# Usage: enableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "1"
}

disableAutoConf() {
	# Disables ipv6 auto configuration on an interface
	# Usage: disableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "0"
}

fixMac() {
	# Update MAC address on device/interface
	#
	# fixMac <newmac> <physdev> <interface> <overwrite (optional)>
	#
	# newmac: MAC address to be set
	# physdev: Device name to be updated as in ifconfig (e.g. br-mesh)
	# interface: Interface to be updated as in uci (e.g. mesh)
	# overwrite: If non-zero, the MAC is always replaced; if not set, the MAC is only written if none is present

	local newmac=$1
	local dev=$2
	local iface=$3
	local overwrite=$4

	if uci -q get "network.${iface}.macaddr" > /dev/null && [ ! -n "$overwrite" ] ; then
		echo "MAC for ${iface} is already set"
	else
		echo "Fixing MAC on ${dev} (${iface})"
		sleep 10

		uci set "network.${iface}.macaddr=$newmac"
		uci -q commit network

		ifconfig "$dev" down
		ifconfig "$dev" hw ether "$newmac"
		ifconfig "$dev" up
		/etc/init.d/network restart
	fi
}
