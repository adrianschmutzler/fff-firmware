# Copyright 2019 Adrian Schmutzler
# License GPLv3

. /lib/functions.sh
. /lib/functions/network.sh

setAutoConf() {
	# Sets ipv6 auto configuration on an interface to on/off
	# Usage: setAutoConf <interface> <[0|1]>
	local iface=$1
	local on=$2

	sysctlfile="/etc/sysctl.d/51-fff-network-$iface.conf"
	echo "# Generated from configurenetwork" > "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_defrtr = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_pinfo = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.autoconf = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_rtr_pref = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.forwarding = 0" >> "$sysctlfile"

	/sbin/sysctl -p "$sysctlfile"
}

enableAutoConf() {
	# Enables ipv6 auto configuration on an interface
	# Usage: enableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "1"
}

disableAutoConf() {
	# Disables ipv6 auto configuration on an interface
	# Usage: disableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "0"
}

fixMac() {
	# Update MAC address on live device/interface
	#
	# fixMac <newmac> <interface>
	#
	# newmac: MAC address to be set
	# interface: Interface to be updated as in uci (e.g. mesh)

	local newmac=$1
	local iface=$2
	local dev

	echo "Fixing MAC on $iface"
	sleep 10

	network_get_physdev dev "$iface"

	uci set "network.${iface}.macaddr=$newmac"
	uci commit network

	if [ -n "$dev" ]; then
		ip link set "$dev" down
		ip link set "$dev" address "$newmac"
		ip link set "$dev" up
	fi

	/etc/init.d/network restart
}

addVLAN() {
	# Add complete config for a singe VLAN
	# If VLAN ID exists, it will be overwritten (not added a second time)
	#
	# Does not include uci commit!
	#
	# Usage: addVLAN <VLAN ID> [<PORTS>]

	local vlan=$1
	local ports=$2

	if [ -z "$vlan" ]; then
		echo "ERROR: Missing VLAN ID for addVLAN()"
		return 1
	fi

	uci set network.vlan$vlan='switch_vlan'
	uci set network.vlan$vlan.vlan="$vlan"
	uci set network.vlan$vlan.device="$(uci get network.@switch[0].name)"
	uci set network.vlan$vlan.ports="$ports"
}

setupSwitch() {
	# Set up switch for switch-based devices
	# This is intended for initial setup, not for updates
	# (changing ports will be sufficient then)
	#
	# Usage: setupSwitch <CLIENT_PORTS> <BATMAN_PORTS> [<WAN_PORTS>]

	local CLIENT_PORTS=$1
	local BATMAN_PORTS=$2
	local WAN_PORTS=$3

	uci set "network.vlan1.ports=$CLIENT_PORTS"

	# This defines the VLAN for WAN ports inside the switch.
	# This is required even if the WAN eth is separate, but the WAN port is in the switch!
	if [ -n "$WAN_PORTS" ]; then
		uci set "network.vlan2.ports=$WAN_PORTS"
	fi

	uci set "network.vlan3.ports=$BATMAN_PORTS"

	local MESHIF="$(uci get network.lan.ifname | grep -o -m1 "eth\d")"
	uci set network.ethmesh.ifname="$MESHIF.3"
}

getEthMode() {
	# Returns mode (CLIENT, BATMAN, WAN) of a specified ethX
	# Note: This will also match VLANs, e.g. eth1 will match eth1.2
	# Note: This will only return one option if multiple are set
	#
	# Usage: getEthMode <DEV, e.g. eth0>

	local DEV=$1

	if uci -q get network.wan.ifname | grep -q "\b${DEV}\b"; then
		echo "WAN"
	elif uci -q get network.ethmesh.ifname | grep -q "\b${DEV}\b"; then
		echo "BATMAN"
	elif uci -q get network.mesh.ifname | grep -q "\b${DEV}\b"; then
		echo "CLIENT"
	else
		# Misconfigured or eth does not exist
		return 1
	fi
}

getPortMode() {
	# Returns mode (CLIENT, BATMAN, WAN) of a specified switch-based port
	# Note: This will only work for untagged ports
	#
	# Usage: getPortMode <PORT, e.g. 2>

	local PORT=$1
	local VLAN

	identify_vlan() {
		local name=$1
		local vlan=$(uci get network.$name.vlan)

		uci get network.$name.ports | grep -q "\b${PORT}\b" && VLAN=$vlan
	}

	config_load network
	config_foreach identify_vlan switch_vlan

	if [ "$VLAN" = "2" ]; then
		echo "WAN"
	elif [ "$VLAN" = "3" ]; then
		echo "BATMAN"
	elif [ "$VLAN" = "1" ]; then
		echo "CLIENT"
	elif [ -n "$VLAN" ]; then
		# Non-standard VLAN ID
		return 1
	else
		# Port tagged or unused
		return 1
	fi
}

setupOnePort() {
	# Set up port mode for non-switch port
	#
	# For two-port devices without switch just call this twice:
	# setupOnePort "WAN" eth0
	# setupOnePort "BATMAN" eth1
	#
	# Indivual change of a single port is also supported now!
	#
	# Usage: setupOnePort <ETHMODE, e.g. BATMAN, CLIENT, WAN> [<DEV, default: eth0>]

	local ETHMODE=$1
	local DEV=$2
	local MESH

	[ -n "$DEV" ] || DEV=eth0

	if [ "$ETHMODE" = "WAN" ]; then
		uci set network.wan=interface
		uci set network.wan.ifname="$DEV"
		uci set network.wan.proto=dhcp
		enableAutoConf "$DEV"
	elif uci -q get network.wan.ifname | grep "^ *$DEV *$"; then
		# only disable WAN for $DEV if it was set before
		# -> will ignore other eth if called for second port
		uci del network.wan.ifname
		disableAutoConf "$DEV"
	fi

	MESH="$(uci -q get network.mesh.ifname | sed "s/\b$DEV //" | sed "s/ *$DEV$//g")"
	if [ "$ETHMODE" = "CLIENT" ]; then
		if [ -n "$MESH" ]; then
			uci set network.mesh.ifname="$MESH $DEV"
		else
			uci set network.mesh.ifname="$DEV"
		fi
	else
		uci set network.mesh.ifname="$MESH"
	fi

	if [ "$ETHMODE" = "BATMAN" ]; then
		# Always overwrite (if both ports are set to BATMAN, only the last will be)
		uci set network.ethmesh.ifname="$DEV"
	elif uci -q get network.ethmesh.ifname | grep "^ *$DEV *$"; then
		uci del network.ethmesh.ifname
	fi

	uci commit network
}

switchPrefix() {
	# Returns ethX. of switch, e.g. "eth0."
	#
	# This requires at least one switch_vlan being present and network to be initialized

	ls /sys/class/net/ | grep -m1 -o "^eth\d\."
}
