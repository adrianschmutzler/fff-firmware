# Copyright 2019 Adrian Schmutzler
# License GPLv3

. /lib/functions/network.sh

setAutoConf() {
	# Sets ipv6 auto configuration on an interface to on/off
	# Usage: setAutoConf <interface> <[0|1]>
	local iface=$1
	local on=$2

	sysctlfile="/etc/sysctl.d/51-fff-network-$iface.conf"
	echo "# Generated from configurenetwork" > "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_defrtr = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_pinfo = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.autoconf = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.accept_ra_rtr_pref = $on" >> "$sysctlfile"
	echo "net.ipv6.conf.$iface.forwarding = 0" >> "$sysctlfile"

	/sbin/sysctl -p "$sysctlfile"
}

enableAutoConf() {
	# Enables ipv6 auto configuration on an interface
	# Usage: enableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "1"
}

disableAutoConf() {
	# Disables ipv6 auto configuration on an interface
	# Usage: disableAutoConf <interface>
	local iface=$1

	setAutoConf "$iface" "0"
}

fixMac() {
	# Update MAC address on live device/interface
	#
	# fixMac <newmac> <interface>
	#
	# newmac: MAC address to be set
	# interface: Interface to be updated as in uci (e.g. mesh)

	local newmac=$1
	local iface=$2
	local dev

	echo "Fixing MAC on $iface"
	sleep 10

	network_get_physdev dev "$iface"

	uci set "network.${iface}.macaddr=$newmac"
	uci commit network

	if [ -n "$dev" ]; then
		ip link set "$dev" down
		ip link set "$dev" address "$newmac"
		ip link set "$dev" up
	fi

	/etc/init.d/network restart
}

setupSwitch() {
	# Set up switch for switch-based devices
	# This is intended for initial setup, not for updates
	# (changing ports will be sufficient then)
	#
	# Usage: setupSwitch <CLIENT_PORTS> <BATMAN_PORTS> [<WAN_PORTS>]

	local CLIENT_PORTS=$1
	local BATMAN_PORTS=$2
	local WAN_PORTS=$3

	uci set "network.vlan1.ports=$CLIENT_PORTS"

	# This defines the VLAN for WAN ports inside the switch.
	# This is required even if the WAN eth is separate, but the WAN port is in the switch!
	if [ -n "$WAN_PORTS" ]; then
		uci set "network.vlan2.ports=$WAN_PORTS"
	fi

	uci set "network.vlan3.ports=$BATMAN_PORTS"

	local MESHIF="$(uci get network.lan.ifname | grep -o -m1 "eth\d")"
	uci set network.ethmesh.ifname="$MESHIF.3"
}

setupOnePort() {
	# Set up port mode for one-port devices
	# This is intended for initial setup and for updates
	# (latter will require network restart)
	#
	# Usage: setupOnePort <ETHMODE, e.g. BATMAN, CLIENT, WAN> [<DEV, default: eth0>]

	local ETHMODE=$1
	local DEV=$2

	[ -n "$DEV" ] || DEV=eth0

	if [ "$ETHMODE" = "WAN" ]; then
		uci set network.mesh.ifname="bat0"
		uci set network.wan=interface
		uci set network.wan.ifname="$DEV"
		uci set network.wan.proto=dhcp
		uci -q del network.ethmesh.ifname
		enableAutoConf "$DEV"
	elif [ "$ETHMODE" = "CLIENT" ] ; then
		disableAutoConf "$DEV"
		uci set network.mesh.ifname="bat0 $DEV"
		uci -q del network.wan.ifname
		uci -q del network.ethmesh.ifname
	else # default=BATMAN
		disableAutoConf "$DEV"
		uci set network.mesh.ifname="bat0"
		uci -q del network.wan.ifname
		uci set network.ethmesh.ifname="$DEV"
	fi
	uci commit network
}

setup2ndEth() {
	# Set up second port for devices with to ports directly connected to ethX (no switch)
	# This is intended for initial setup and for updates
	#
	# Use this in combination with setupOnePort() for the first port.
	# Calling setupOnePort() will overwrite the settings made here, so always call in succession, e.g.
	# setupOnePort "WAN" eth0
	# setup2ndEth "BATMAN" eth1
	#
	# Usage: setup2ndEth <ETHMODE: BATMAN or CLIENT> <DEV, e.g. eth1>

	local ETHMODE=$1
	local DEV=$2

	local meshif="$(uci -q get network.mesh.ifname)"

	if [ "$ETHMODE" = "CLIENT" ] ; then
		# Only write if not only there
		echo "$meshif" | grep -q "$DEV" || uci set network.mesh.ifname="$meshif $DEV"
	else
		# Remove if there
		uci set network.mesh.ifname="$(echo "$meshif" | sed "s/ *$DEV//")"
	fi

	if [ "$ETHMODE" = "BATMAN" ] ; then
		# Always overwrite (if both ports are set to BATMAN, only the second will be)
		uci set network.ethmesh.ifname="$DEV"
	else
		uci -q get network.ethmesh.ifname | grep -q "$DEV" && uci del network.ethmesh.ifname
	fi

	uci commit network
}

switchPrefix() {
	# Returns ethX. of switch, e.g. "eth0."
	#
	# This requires at least one switch_vlan being present and network to be initialized

	ls /sys/class/net/ | grep -m1 -o "^eth\d\."
}
