#!/bin/sh
# Copyright 2018 Adrian Schmutzler
# License GPLv3

. /lib/functions/fff/keyxchange
. /usr/share/libubox/jshn.sh

make_config() {
	# Create VPN config
	#
	# Call without parameters

	index_l2tp=0
	index_json=1
	json_load "$(cat "$hoodfile")"
	json_select vpn
	# get VPN peers
	while json_select "$index_json" > /dev/null
	do
		json_get_var protocol protocol
		# Current design requires "fastd" for both fastd and L2TP, decision is made by gateway
		if [ "$protocol" == "fastd" ]; then
			json_get_var servername name
			json_get_var key key
			json_get_var address address
			json_get_var port port
			
			if [ "l2tp" = "$(wget -T10 "${address}/vpn.txt" -O - 2>/dev/null)" ]; then
				# Setup L2TP
				make_l2tp "$address" "$port" "$index_l2tp"
				index_l2tp=$((index_l2tp + 1))
			else
				# Setup fastd
				make_fastd "$servername" "$address" "$port" "$key"
			fi
		fi
		json_select ".." # back to vpn
		index_json=$(( index_json + 1 ))
	done
	json_select ".." # back to root
}

make_fastd() {
	# Create fastd config
	#
	# Syntax: make_fastd <servername> <address> <port> <key>

	if [ $# -ne "4" ]
	then
		return 1
	fi

	local servername=$1
	local address=$2
	local port=$3
	local key=$4

	filename="/etc/fastd/fff/peers/$servername"
	echo "#name \"${servername}\";" > "$filename"
	echo "key \"${key}\";" >> "$filename"
	echo "remote ipv4 \"${address}\" port ${port};" >> "$filename"
	echo "" >> "$filename"
	echo "float yes;" >> "$filename"
	
	return 0
}

make_l2tp() {
	# Create L2TP config
	#
	# Syntax: make_l2tp <address> <port> <count>

	if [ $# -ne "3" ]
	then
		return 1
	fi

	local address=$1
	local port=$2
	local count=$3

	# Use MAC address as hostname if not set
	hostname="$(cat /proc/sys/kernel/hostname)"
	[ "$hostname" = "LEDE" ] && hostname=""
	[ "$hostname" = "" ] && hostname="$(awk '{ mac=toupper($1); gsub(":", "", mac); print mac }' /sys/class/net/br-mesh/address 2>/dev/null)"

	L2PORT=$((port + 10000))

	uci -q set "tunneldigger.$count=broker"
	uci -q set "tunneldigger.$count.address=${address}:$L2PORT"
	uci -q set "tunneldigger.$count.uuid=$hostname"
	uci -q set "tunneldigger.$count.interface=l2tp$count"
	uci -q set "tunneldigger.$count.enabled=1"
	uci -q set "tunneldigger.$count.hook_script=/etc/tunneldigger/tunneldigger.hook"
	uci -c /tmp commit tunneldigger
	
	return 0
}

# vim: set noexpandtab:tabstop=4
