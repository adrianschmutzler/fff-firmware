. /lib/functions.sh
. /lib/functions/fff/network
. /lib/functions/fff/networksetup
. /lib/functions/fff/babel

remove_babelpeer() {
	local name="$1"

	if ! echo $name | grep -q cfg ; then # do not delete default interface
		if ! uci -q get gateway.$name > /dev/null; then
			# remove interface
			uci del network.$name
			# remove iif-rules
			babel_delete_iifrules "$name"
			# remove babel interface
			babel_delete_interface "$name"
			# remove wireguard config (optional)
			uci -q del network.@wireguard_$name[-1]
			# remove penalties (optional)
			uci -q del "babeld.penalty_$name"
		fi
	fi

	return 0
}

add_babelpeer() {
	local name="$1"
	local vlan
	local iface
	local type
	local rxcost
	local penalty

	echo "-> Adding Babel peer $name"

	# set up network interface
	babel_add_network "$name" || exit 1
	uci set network.$name.proto=static

	if vlan=$(uci -q get gateway.$name.vlan); then
		uci set network.$name.ifname="$(switchPrefix)$vlan"
	elif iface=$(uci -q get gateway.$name.iface); then
		uci set network.$name.ifname=$iface
	else
		echo "ERROR: No VLAN or interface set for babelpeer $name!"
		return
	fi

	# peer_ips
	uci -q delete "network.$name.ipaddr"
	uci -q delete "network.$name.ip6addr"
	babel_add_peeraddr "network.$name.ipaddr"
	babel_add_peer6addr "network.$name.ip6addr"

	# set up babel interface
	type=$(uci -q get gateway.$name.type) || type=wired
	rxcost=$(uci -q get gateway.$name.rxcost)
	babel_add_interface "$name" "$name" "$type" "$rxcost"

	# add iif-rules
	babel_add_iifrules "$name" "10" "31"

	# babel penalty (RX and TX)
	if penalty=$(uci -q get gateway.$name.babel_penalty); then
		babel_set_penalty "$name" "$penalty"
	fi

	return 0
}

add_wireguardpeer() {
	local name="$1"
	local rxcost
	local penalty
	local privkey

	echo "-> Adding Wireguard peer $name"

	# set up network interface
	babel_add_network "$name" || exit 1
	uci set network.$name.proto=wireguard
	uci set network.$name.fwmark='0xc8'
	uci set network.$name.nohostroute=1

	# set up babel interface
	rxcost=$(uci -q get gateway.$name.rxcost)
	babel_add_interface "$name" "$name" "wired" "$rxcost"

	# add iif-rules
	babel_add_iifrules "$name" "10" "31"

	# babel penalty (RX and TX)
	if penalty=$(uci -q get gateway.$name.babel_penalty); then
		babel_set_penalty "$name" "$penalty"
	fi

	# set up wireguard
	if privkey=$(uci -q get gateway.$name.local_private_key); then
		uci set network.$name.private_key="$privkey"
	else
		privkey=$(wg genkey)
		uci set network.$name.private_key="$privkey"
		uci set gateway.$name.local_private_key="$privkey"
	fi
	echo "WIREGUARD: publickey for ${name}: $(echo $privkey | wg pubkey)"

	# configure wireguard
	local wgname="wireguard_$name"
	uci -q get network.@$wgname[-1] > /dev/null || uci set network.$wgname=$wgname
	uci set network.@$wgname[-1].public_key="$(uci get gateway.$name.remote_public_key)"
	uci set network.@$wgname[-1].endpoint_host="$(uci get gateway.$name.endpoint_host)"
	uci set network.@$wgname[-1].endpoint_port="$(uci get gateway.$name.endpoint_port)"
	uci set network.@$wgname[-1].persistent_keepalive="$(uci get gateway.$name.persistent_keepalive)"
	uci -q del network.@$wgname[-1].allowed_ips
	uci add_list network.@$wgname[-1].allowed_ips='::/0'
	uci add_list network.@$wgname[-1].allowed_ips='0.0.0.0/0'

	# remove old addresses
	uci -q del network.$name.addresses

	# link local
	wgmac="$(cat "/sys/class/net/br-mesh/address")"
	uci add_list network.$name.addresses="$(ipEUIAssemble "fe80::/64" "$wgmac")"

	# peer_ips
	babel_add_peeraddr "network.$name.addresses"
	babel_add_peer6addr "network.$name.addresses"

	return 0
}

configure() {
	# Remove peers missing in gateway config
	echo "Removing unused Babel/Wireguard peers"
	config_load babeld
	config_foreach remove_babelpeer interface

	# Add new peers
	echo "Adding Babel peers"
	config_load gateway
	config_foreach add_babelpeer babelpeer

	# Add new wireguard peers
	echo "Adding Wireguard peers"
	config_load gateway
	config_foreach add_wireguardpeer wireguardpeer
}

apply() {
	uci commit network
	uci commit babeld
	uci commit gateway
}

revert() {
	uci revert network
	uci revert babeld
	uci revert gateway
}
